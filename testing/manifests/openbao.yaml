apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: role-tokenreview-binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: tokenreview
    namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tokenreview
---
apiVersion: v1
kind: Service
metadata:
  name: openbao
spec:
  selector:
    app: openbao
  ports:
    - name: http
      protocol: TCP
      port: 8200
      targetPort: http
      nodePort: 8200
    - name: https
      protocol: TCP
      port: 18200
      targetPort: https
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openbao
  labels:
    app: openbao
spec:
  replicas: 1
  selector:
    matchLabels:
      app: openbao
  template:
    metadata:
      labels:
        app: openbao
    spec:
      containers:
        - name: openbao
          image: ghcr.io/openbao/openbao:2.4.3
          command:
            - "/bin/sh"
            - "-c"
            - "bao server -config=/config/openbao.json"
          env:
            - name: BAO_LOG_LEVEL
              value: "debug"
          ports:
            - name: http
              containerPort: 8200
              protocol: TCP
            - name: https
              containerPort: 18200
              protocol: TCP
          volumeMounts:
            - name: openbao-config
              mountPath: /config
            - name: hostvolume
              mountPath: /host
              readOnly: true

          #livenessProbe:
          #  httpGet:
          #    path: /v1/sys/health
          #    port: 8200

          #readinessProbe:
          #  httpGet:
          #    path: /v1/sys/health
          #    port: 8200

          #startupProbe:
          #  failureThreshold: 600
          #  httpGet:
          #    path: /v1/sys/health
          #    port: 8200

        - name: openbao-configurator
          image: ghcr.io/openbao/openbao:2.4.3
          command:
            - "/bin/sh"
            - "-x"
            - /config/initialize.sh
          env:
            - name: BAO_ADDR
              value: "http://localhost:8200"
          volumeMounts:
            - name: openbao-config
              mountPath: /config
            - name: hostvolume
              mountPath: /host
              readOnly: true
            - name: unseal
              mountPath: /unseal

      serviceAccountName: tokenreview

      volumes:
        - name: openbao-config
          configMap:
            name: openbao-config
        - name: hostvolume
          hostPath:
            path: /host
        - name: unseal
          emptyDir:
            medium: Memory
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: openbao-config
data:
  initialize.sh: |
    # Wait for OpenBao to be up.
    while true; do
      bao status
      status_code=$?
      if [ "$status_code" -eq 2 ]; then
        break
      fi
      echo "Waiting for OpenBao to be ready... (status code: $status_code)"
      sleep 1
    done

    # Initialize.
    bao operator init -key-shares=1 -key-threshold=1 -format=json > /unseal/init.json

    # Extract unseal key and root token.
    UNSEAL_KEY=$(awk '/"unseal_keys_b64"/ {getline; gsub(/[", ]/, "", $0); print $0}' /unseal/init.json)
    ROOT_TOKEN=$(awk -F'"' '/"root_token"/ {print $4; exit}' /unseal/init.json)

    # Unseal.
    bao operator unseal "$UNSEAL_KEY"

    export BAO_TOKEN="$ROOT_TOKEN"

    # Enable kubernetes auth method.
    bao auth enable kubernetes
    bao write auth/kubernetes/config kubernetes_host=https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT

    # Enable kv1 secrets engine.
    bao secrets enable --path=secret/ kv

    # Configure policies.
    bao policy write keycloak/reader - <<EOF
    path "secret/keycloak/*" {
      capabilities = ["read"]
    }
    EOF
    bao policy write keycloak/admin - <<EOF
    path "secret/keycloak/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }
    EOF

    # Create roles.
    bao write auth/kubernetes/role/keycloak-reader bound_service_account_names="keycloak" bound_service_account_namespaces="default" policies=keycloak/reader
    bao write auth/kubernetes/role/keycloak-admin bound_service_account_names="keycloak" bound_service_account_namespaces="default" policies=keycloak/admin

    # Sleep forever.
    while true; do
      sleep 999999999
    done

  openbao.json: |
    {
      "api_addr": "https://openbao:8200",
      "ui": true,
      "listener": {
        "tcp": {
          "address": "0.0.0.0:8200",
          "tls_disable": true,
          "telemetry": {
            "unauthenticated_metrics_access": true
          }
        },
        "tcp": {
          "address": "0.0.0.0:18200",
          "tls_cert_file": "/host/testing/certs/openbao.pem",
          "tls_key_file": "/host/testing/certs/openbao-key.pem",
          "tls_ca_file": "/host/testing/certs/ca.pem"
        }
      },
      "storage": {
        "file": {
          "path": "/tmp"
        }
      },
      "telemetry": {
        "prefix_filter": [ "+vault" ]
        "prometheus_retention_time": "1h",
        "disable_hostname": true,
      }
    }
